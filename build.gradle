/*
 * Copyright 2014-present the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Standard Gradle project properties used by tasks
project.description = 'Code examples for JSON Schema validation.' 
project.group = 'com.neiljbrown.examples'
//project.name - Property defined in settings.gradle, overridding the default used by Gradle which is based on proj dir
project.version = 1.0 

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'java'

ext {
  // Cribbed from https://github.com/mindscratch/reactor-offline/blob/master/build.gradle
  javadocLinks = [] as String[]
  // Min required Java version
  javaMinVersion="8"
}

repositories {
  mavenCentral()
}

dependencies {
  //---- Test dependencies
  testCompile('junit:junit:4.12')
  testCompile('org.assertj:assertj-core:3.5.2')
  // Library supporting JSON schema validation - checking JSON schema is syntactically valid and generated JSON conforms 
  // to validation constraints in schema.
  testCompile('com.github.fge:json-schema-validator:2.2.6')
  // Library supporting JSON parsing, serialisation and data-binding
  testCompile('com.fasterxml.jackson.core:jackson-databind:2.8.2')
  testCompile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.2')  
  // Library supporting intelligent, semantic comparison of JSON 
  testCompile('org.skyscreamer:jsonassert:1.3.0')
}

eclipse {
  classpath {
    containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
    containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    downloadJavadoc = true
  }
}

tasks.withType(JavaCompile) {
  // Define min version of Java language source, and compile to classes that require a target JRE to support that version
  sourceCompatibility = "${project.ext.javaMinVersion}"
  targetCompatibility = "${project.ext.javaMinVersion}"
}

// Custom task for running javadoc on Java classes in src/test/java
task javadocTests(type: Javadoc) {
  source = sourceSets.test.allJava
  classpath = sourceSets.test.compileClasspath
  options.links(project.ext.javadocLinks)
}